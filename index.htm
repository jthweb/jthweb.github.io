<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JThweb | Jonathan</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome for general icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- three.js for 3D animation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        /* --- Color & Theme Variables --- */
        :root {
            --primary: #0078d4;
            --secondary: #107c10;
            --accent: #744da9;
            --bg-primary: #ffffff;
            --bg-secondary: #f5f5f5;
            --text-primary: #242424;
            --text-secondary: #616161;
            --border-color: #e1e1e1;
            --shadow-color: rgba(0, 0, 0, 0.1);
        }

        html.dark {
            --primary: #2899f5;
            --secondary: #1db954;
            --accent: #9b72d9;
            --bg-primary: #121212;
            --bg-secondary: #1e1e1e;
            --text-primary: #f5f5f5;
            --text-secondary: #a0a0a0;
            --border-color: #333333;
            --shadow-color: rgba(0, 0, 0, 0.4);
        }

        /* --- Base Styles --- */
        html {
            scroll-behavior: smooth;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, Helvetica, Arial, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            transition: background-color 0.3s ease, color 0.3s ease;
            overflow-x: hidden;
            /* Hide default cursor */
            cursor: none;
        }

        /* --- Custom Animated Cursor --- */
        #custom-cursor {
            position: fixed;
            width: 16px; /* Smaller base size */
            height: 16px;
            border-radius: 50%;
            background-color: var(--primary); /* Cursor color */
            pointer-events: none; /* Important: allows clicking elements underneath */
            transform: translate(-50%, -50%); /* Center the cursor */
            transition: width 0.2s ease, height 0.2s ease, background-color 0.3s ease, opacity 0.3s ease, border 0.2s ease;
            z-index: 9999; /* Ensure it's on top */
            opacity: 0.8;
            border: 2px solid transparent; /* Initial transparent border */
        }
        body:hover #custom-cursor {
            opacity: 1;
        }
        body:active #custom-cursor {
            width: 24px; /* Larger on click */
            height: 24px;
            opacity: 0.9;
            border: 2px solid var(--accent); /* Accent border on click */
        }
        /* Hover over interactive elements to change cursor */
        a:hover #custom-cursor, button:hover #custom-cursor, .stat-bubble:hover #custom-cursor, .section-card:hover #custom-cursor {
            width: 20px; /* Slightly larger on hover over interactive elements */
            height: 20px;
            opacity: 1;
            border: 2px solid var(--primary); /* Primary border on hover */
        }


        /* --- 3D Canvas --- */
        #bg-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            opacity: 0; /* Starts hidden, fades in with JS */
            transition: opacity 1s ease-in;
        }

        /* --- Header --- */
        header {
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            background-color: color-mix(in srgb, var(--bg-primary) 80%, transparent);
            border-bottom: 1px solid var(--border-color);
            transition: background-color 0.3s ease, border-color 0.3s ease;
        }

        /* --- General Components --- */
        .section-card {
            background-color: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 20px var(--shadow-color);
            transition: all 0.3s ease;
        }

        .section-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 30px var(--shadow-color);
        }

        .progress-bar-container {
            background-color: color-mix(in srgb, var(--bg-primary) 50%, transparent);
            border-radius: 8px;
            overflow: hidden;
        }

        .progress-bar {
            height: 8px;
            border-radius: 8px;
            background: linear-gradient(90deg, var(--primary), var(--accent));
            transition: width 1.5s cubic-bezier(0.25, 1, 0.5, 1);
            width: 0; /* Initial width */
        }

        .tool-icon {
            width: 24px;
            height: 24px;
            margin-right: 12px;
            object-fit: contain;
        }

        /* --- Theme Toggle Switch --- */
        .theme-switch-wrapper {
            display: flex;
            align-items: center;
        }
        .theme-switch {
            display: inline-block;
            height: 24px;
            position: relative;
            width: 44px;
        }
        .theme-switch input {
            display:none;
        }
        .slider {
            background-color: #ccc;
            bottom: 0;
            cursor: pointer;
            left: 0;
            position: absolute;
            right: 0;
            top: 0;
            transition: .4s;
            border-radius: 24px;
        }
        .slider:before {
            background-color: #fff;
            bottom: 2px;
            content: "";
            height: 20px;
            left: 2px;
            position: absolute;
            transition: .4s;
            width: 20px;
            border-radius: 50%;
        }
        input:checked + .slider {
            background-color: var(--primary);
        }
        input:checked + .slider:before {
            transform: translateX(20px);
        }

        /* --- GitHub Stats --- */
        .github-stats-img {
            border-radius: 8px;
            border: 1px solid var(--border-color);
            width: 100%;
            height: auto;
            object-fit: cover;
            background-color: var(--bg-secondary);
        }

        /* --- Animations --- */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .animate-fade-in {
            animation: fadeIn 0.8s cubic-bezier(0.25, 1, 0.5, 1) forwards;
        }

        .opacity-0 { opacity: 0; }

        /* Project thumbnail styling - REMOVED */
        /* .project-thumbnail {
            width: 100%;
            height: 180px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 1rem;
            border: 1px solid var(--border-color);
            background-color: var(--bg-primary);
        } */

        /* Glassmorphism effect for individual Hero stats */
        .stat-bubble {
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            background-color: color-mix(in srgb, var(--bg-primary) 20%, transparent); /* Lighter for light, darker for dark */
            border: 1px solid var(--border-color); /* Use existing border color */
            border-radius: 9999px; /* For oval/pill shape */
            padding: 0.5rem 1rem; /* Adjust padding */
            box-shadow: 0 2px 4px var(--shadow-color);
            transition: all 0.3s ease; /* Added transition for hover effect */
        }
        html.dark .stat-bubble {
            background-color: color-mix(in srgb, var(--bg-primary) 30%, transparent);
            border: 1px solid var(--border-color);
        }
        /* Hover effect for stat bubbles */
        .stat-bubble:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 12px var(--shadow-color);
        }

        /* Button Animations */
        .animated-button {
            position: relative; /* Needed for shine effect */
            overflow: hidden; /* Hide overflow for shine */
            transition: all 0.2s ease-in-out;
            transform: scale(1);
            z-index: 1; /* Ensure button is above shine */
        }
        .animated-button:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        .animated-button:active {
            transform: scale(0.95);
            box-shadow: none;
        }
        /* Shine effect for buttons */
        .animated-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -75%;
            width: 50%;
            height: 100%;
            background: rgba(255, 255, 255, 0.3); /* White shine */
            transform: skewX(-20deg);
            transition: all 0.7s ease;
            z-index: 2;
        }
        .animated-button:hover::before {
            left: 125%;
        }

        /* Specific styles for primary button */
        .animated-button.primary {
            background-color: var(--primary);
            color: white;
        }
        .animated-button.primary:hover {
            background-color: color-mix(in srgb, var(--primary) 90%, black);
        }
        /* Specific styles for secondary button */
        .animated-button.secondary {
            background-color: var(--bg-secondary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
        }
        .animated-button.secondary:hover {
            background-color: color-mix(in srgb, var(--bg-secondary) 90%, black);
            border-color: color-mix(in srgb, var(--border-color) 90%, black);
        }


        /* Intro Loader */
        #intro-loader {
            position: fixed;
            inset: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 100;
            background-color: var(--bg-primary); /* Use primary background color */
            color: var(--text-primary);
            transition: opacity 1s ease-out, visibility 1s ease-out;
        }
        #intro-loader.fade-out {
            opacity: 0;
            visibility: hidden;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.05); }
        }
        .animate-pulse-loader {
            animation: pulse 1.5s infinite;
        }
        #main-content {
            opacity: 0;
            display: none; /* Initially hidden */
            transition: opacity 1s ease-in;
        }
        #main-content.show {
            opacity: 1;
            display: block; /* Show when 'show' class is added */
        }
    </style>
</head>
<body class="antialiased">

    <!-- Custom Animated Cursor -->
    <div id="custom-cursor"></div>

    <!-- Intro Loader -->
    <div id="intro-loader">
        <!-- Replace with your actual logo.gif URL -->
        <img src="logo.gif" onerror="this.onerror=null;this.src='https://placehold.co/100x100/0078d4/ffffff?text=LOGO';" alt="JThweb Loading" class="animate-pulse-loader">
    </div>

    <!-- 3D Background Canvas -->
    <canvas id="bg-canvas"></canvas>

    <!-- Main Content Wrapper (initially hidden) -->
    <div id="main-content">
        <!-- Header -->
        <header class="sticky top-0 z-50 w-full">
            <div class="container mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex items-center justify-between h-16">
                    <a href="#" class="text-2xl font-bold flex items-center" style="color: var(--primary);">
                        <!-- Replace with your actual logo.gif URL -->
                        <img src="logo.gif" onerror="this.onerror=null;this.src='https://placehold.co/40x40/0078d4/ffffff?text=LOGO';" alt="JThweb Logo" class="h-8 w-8 mr-2 rounded-full">
                        JThweb
                    </a>
                    <nav class="hidden md:flex items-center space-x-8">
                        <a href="#about" class="font-medium text-gray-500 hover:text-[var(--primary)] transition">About</a>
                        <a href="#skills" class="font-medium text-gray-500 hover:text-[var(--primary)] transition">Skills</a>
                        <a href="#stats" class="font-medium text-gray-500 hover:text-[var(--primary)] transition">Stats</a>
                        <a href="#projects" class="font-medium text-gray-500 hover:text-[var(--primary)] transition">Projects</a>
                        <a href="#contact" class="font-medium text-gray-500 hover:text-[var(--primary)] transition">Contact</a>
                        <a href="https://github.com/JThweb" target="_blank" rel="noopener noreferrer" class="font-medium text-gray-500 hover:text-[var(--primary)] transition flex items-center">
                            <i class="fab fa-github mr-2"></i> Follow
                        </a>
                        <a href="https://ko-fi.com/jthweb" target="_blank" rel="noopener noreferrer" class="font-medium text-gray-500 hover:text-[var(--primary)] transition flex items-center">
                            <i class="fas fa-mug-hot mr-2"></i> Sponsor
                        </a>
                    </nav>
                    <div class="flex items-center space-x-4">
                        <!-- Theme Toggle -->
                        <div class="theme-switch-wrapper">
                            <i class="fas fa-sun mr-2 text-yellow-500"></i>
                            <label class="theme-switch" for="theme-toggle">
                                <input type="checkbox" id="theme-toggle" />
                                <span class="slider"></span>
                            </label>
                            <i class="fas fa-moon ml-2 text-gray-400"></i>
                        </div>
                        <!-- Mobile Menu Button -->
                        <div class="md:hidden">
                            <button id="mobile-menu-button" class="text-gray-500 hover:text-[var(--primary)] focus:outline-none">
                                <i class="fas fa-bars text-2xl"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Mobile Menu -->
            <div id="mobile-menu" class="hidden md:hidden p-4" style="background-color: var(--bg-secondary);">
                <a href="#about" class="block py-2 text-center text-[var(--text-primary)]">About</a>
                <a href="#skills" class="block py-2 text-center text-[var(--text-primary)]">Skills</a>
                <a href="#stats" class="block py-2 text-center text-[var(--text-primary)]">Stats</a>
                <a href="#projects" class="block py-2 text-center text-[var(--text-primary)]">Projects</a>
                <a href="#contact" class="block py-2 text-center text-[var(--text-primary)]">Contact</a>
                <a href="https://github.com/JThweb" target="_blank" rel="noopener noreferrer" class="block py-2 text-center text-[var(--text-primary)] flex items-center justify-center">
                    <i class="fab fa-github mr-2"></i> Follow on GitHub
                </a>
                <a href="https://ko-fi.com/jthweb" target="_blank" rel="noopener noreferrer" class="block py-2 text-center text-[var(--text-primary)] flex items-center justify-center">
                    <i class="fas fa-mug-hot mr-2"></i> Sponsor
                </a>
            </div>
        </header>

        <main class="container mx-auto px-4 sm:px-6 lg:px-8 py-12 relative z-10">

            <!-- Hero Section -->
            <section id="hero" class="text-center min-h-[70vh] flex flex-col justify-center items-center my-16 lg:my-0 opacity-0">
                <div>
                    <!-- Replace with your actual logo.gif URL -->
                    <img src="logo.gif" onerror="this.onerror=null;this.src='https://placehold.co/128x128/0078d4/ffffff?text=LOGO';" alt="Jonathan's Profile" class="w-32 h-32 rounded-full mx-auto mb-6 border-4" style="border-color: var(--bg-secondary); box-shadow: 0 0 25px var(--shadow-color);">
                    <h1 class="text-4xl md:text-6xl font-bold mb-2">Jonathan</h1>
                    <p class="text-xl md:text-2xl mb-4" style="color: var(--text-secondary);">Full Stack Developer & Cloud Enthusiast</p>
                    <p class="text-lg md:text-xl mb-6 max-w-2xl mx-auto" style="color: var(--text-primary);">
                        Hey there! I'm JThweb, a passionate developer dedicated to crafting robust and scalable web applications. I thrive on turning complex challenges into elegant solutions.
                    </p>
                    <!-- Individual glassy effect for stats -->
                    <div class="mt-8 mb-8 flex flex-wrap justify-center gap-4 md:gap-8 text-sm md:text-base">
                        <div class="flex items-center gap-2 stat-bubble"><i class="fa-solid fa-fire text-[var(--primary)]"></i><span>2000+ Contributions</span></div>
                        <div class="flex items-center gap-2 stat-bubble"><i class="fa-solid fa-star text-yellow-500"></i><span id="total-stars">-- Stars</span></div>
                        <div class="flex items-center gap-2 stat-bubble"><i class="fa-solid fa-layer-group text-[var(--accent)]"></i><span>5+ Years Experience</span></div>
                        <div class="flex items-center gap-2 stat-bubble"><i class="fas fa-code text-[var(--primary)]"></i><span id="total-projects">-- Projects</span></div>
                        <div class="flex items-center gap-2 stat-bubble"><i class="fab fa-github-alt text-[var(--primary)]"></i><span>GitHub Pro</span></div>
                        <div class="flex items-center gap-2 stat-bubble"><i class="fas fa-users-cog text-[var(--accent)]"></i><span>Developer Program Member</span></div>
                    </div>
                    <div class="flex justify-center space-x-4">
                        <a href="#contact" class="px-6 py-3 rounded-lg font-semibold animated-button primary">Get in Touch</a>
                        <a href="#projects" class="px-6 py-3 rounded-lg font-semibold animated-button secondary">View My Work</a>
                    </div>
                </div>
            </section>

            <!-- About Section -->
            <section id="about" class="my-24 scroll-mt-16 opacity-0">
                <div class="section-card max-w-4xl mx-auto">
                    <h2 class="text-3xl font-bold text-center mb-6">About Me</h2>
                    <p class="text-lg text-center" style="color: var(--text-secondary);">
                        I'm a passionate developer with a love for building elegant and efficient solutions. With a strong foundation in both front-end and back-end technologies, I enjoy bringing ideas to life, from the initial concept to a fully deployed application. When I'm not coding, you can find me exploring new tech, contributing to open-source projects, or enjoying a good cup of coffee.
                    </p>
                </div>
            </section>

            <!-- Skills Section -->
            <section id="skills" class="my-24 scroll-mt-16 opacity-0">
                <div class="section-card max-w-4xl mx-auto">
                    <h2 class="text-3xl font-bold text-center mb-12">Languages & Tools</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-12 gap-y-8 mb-12">
                        <!-- Manual Skills List -->
                        <div class="space-y-6">
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=PY';" alt="Python Logo" class="tool-icon">
                                    <span class="font-semibold">Python</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 90%;"></div></div>
                            </div>
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/d/d9/Node.js_logo.svg" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=JS';" alt="Node.js Logo" class="tool-icon">
                                    <span class="font-semibold">Node.js</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 85%;"></div></div>
                            </div>
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/6/61/HTML5_logo_and_wordmark.svg" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=HTML';" alt="HTML5 Logo" class="tool-icon">
                                    <span class="font-semibold">HTML5</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 98%;"></div></div>
                            </div>
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/4/4c/Typescript_logo_2020.svg" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=TS';" alt="TypeScript Logo" class="tool-icon">
                                    <span class="font-semibold">TypeScript</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 80%;"></div></div>
                            </div>
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=React';" alt="React Logo" class="tool-icon">
                                    <span class="font-semibold">React</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 88%;"></div></div>
                            </div>
                        </div>
                        <div class="space-y-6">
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/PyCharm_Icon.svg/1024px-PyCharm_Icon.svg.png" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=PyCharm';" alt="PyCharm Logo" class="tool-icon">
                                    <span class="font-semibold">PyCharm</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 90%;"></div></div>
                            </div>
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/9/91/Octicons-mark-github.svg" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=GH';" alt="GitHub Logo" class="tool-icon">
                                    <span class="font-semibold">GitHub</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 95%;"></div></div>
                            </div>
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Github-copilot-logo.svg/1200px-Github-copilot-logo.svg.png" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=CP';" alt="GitHub Copilot Logo" class="tool-icon">
                                    <span class="font-semibold">GitHub Copilot</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 80%;"></div></div>
                            </div>
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/3/33/Figma-logo.svg" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=Figma';" alt="Figma Logo" class="tool-icon">
                                    <span class="font-semibold">Figma</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 75%;"></div></div>
                            </div>
                            <div class="skill-item">
                                <div class="flex items-center mb-2">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/9/93/Amazon_Web_Services_Logo.svg" onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=AWS';" alt="AWS Logo" class="tool-icon">
                                    <span class="font-semibold">AWS</span>
                                </div>
                                <div class="progress-bar-container"><div class="progress-bar" style="width: 70%;"></div></div>
                            </div>
                        </div>
                    </div>
                    <!-- GitHub Top Languages Card -->
                    <h3 class="text-2xl font-bold text-center mb-6">Top Languages on GitHub</h3>
                    <img id="github-top-langs" src="" alt="JThweb's Top Languages" class="github-stats-img max-w-lg mx-auto" />
                </div>
            </section>

            <!-- GitHub Stats Section -->
            <section id="stats" class="my-24 scroll-mt-16 opacity-0">
                <div class="section-card max-w-5xl mx-auto">
                    <h2 class="text-3xl font-bold text-center mb-12">GitHub Stats</h2>
                    <div class="space-y-8">
                        <img id="github-contributions" src="" alt="JThweb's GitHub Contributions" class="github-stats-img w-full" />
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
                            <img id="github-stats-card" src="" alt="JThweb's GitHub Stats" class="github-stats-img" />
                            <!-- GitHub Streak Stats -->
                            <img id="github-streak-stats" src="" alt="JThweb's GitHub Streak Stats" class="github-stats-img" />
                        </div>
                    </div>
                </div>
            </section>

            <!-- Projects Section -->
            <section id="projects" class="my-24 scroll-mt-16 opacity-0">
                <h2 class="text-3xl font-bold text-center mb-12">My Projects</h2>
                <div id="projects-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                    <!-- GitHub projects will be dynamically inserted here -->
                </div>
            </section>

            <!-- Contact Section -->
            <section id="contact" class="my-24 scroll-mt-16 opacity-0">
                <div class="section-card text-center max-w-2xl mx-auto">
                    <h2 class="text-3xl font-bold mb-4">Get In Touch</h2>
                    <p class="mb-8" style="color: var(--text-secondary);">I'm always open to discussing new projects, creative ideas, or opportunities. Feel free to reach out!</p>
                    <a href="mailto:jthweb@duck.com" class="inline-block px-8 py-3 rounded-lg font-semibold animated-button primary">
                        <i class="fas fa-envelope mr-2"></i> Say Hello
                    </a>
                </div>
            </section>
        </main>

        <footer class="py-8" style="background-color: var(--bg-secondary); border-top: 1px solid var(--border-color);">
            <div class="container mx-auto px-4 sm:px-6 lg:px-8 text-center text-[var(--text-secondary)]">
                <div class="flex justify-center space-x-6 mb-4">
                    <a href="https://github.com/JThweb" target="_blank" rel="noopener noreferrer" class="text-2xl hover:text-[var(--primary)] transition"><i class="fab fa-github"></i></a>
                    <a href="https://discordapp.com/users/jthweb" target="_blank" rel="noopener noreferrer" class="text-2xl hover:text-[var(--primary)] transition" title="@JThweb"><i class="fab fa-discord"></i></a>
                    <a href="https://ko-fi.com/jthweb" target="_blank" rel="noopener noreferrer" class="text-2xl hover:text-[var(--primary)] transition" title="Support me on Ko-fi"><i class="fas fa-mug-hot"></i></a>
                </div>
                <p>&copy; 2025 JThweb. All Rights Reserved.</p>
                <p class="text-xs mt-2">This site is <span class="font-bold">Copyleft</span>. Feel free to inspect and adapt the code!</p>
            </div>
        </footer>
    </div> <!-- End of #main-content -->

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const mobileMenuButton = document.getElementById('mobile-menu-button');
            const mobileMenu = document.getElementById('mobile-menu');
            const themeToggle = document.getElementById('theme-toggle');
            const introLoader = document.getElementById('intro-loader');
            const mainContent = document.getElementById('main-content');

            // --- Mobile Menu Toggle ---
            mobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });

            // --- Theme Management ---
            const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)');

            function applyTheme(isDark) {
                const root = document.documentElement;
                console.log('Applying theme. Is dark:', isDark); // Debugging log
                if (isDark) {
                    root.classList.add('dark');
                    themeToggle.checked = true;
                } else {
                    root.classList.remove('dark');
                    themeToggle.checked = false;
                }
                console.log('HTML classes after theme apply:', root.classList); // Debugging log

                // Update 3D background theme
                if (window.update3DTheme) {
                    window.update3DTheme(isDark);
                }
                // Update GitHub stats theme
                updateGitHubStatsTheme(isDark);
            }

            // Initial Theme Setup
            const storedTheme = localStorage.getItem('theme');
            let initialIsDark;
            if (storedTheme) {
                initialIsDark = storedTheme === 'dark';
            } else {
                initialIsDark = systemPrefersDark.matches;
            }
            console.log('Initial theme determined. Stored:', storedTheme, 'System Prefers Dark:', systemPrefersDark.matches, 'Final initialIsDark:', initialIsDark); // Debugging log
            applyTheme(initialIsDark);

            themeToggle.addEventListener('change', (e) => {
                const newTheme = e.target.checked ? 'dark' : 'light';
                console.log('Theme toggle changed to:', newTheme); // Debugging log
                localStorage.setItem('theme', newTheme); // Ensure this is explicitly set
                applyTheme(newTheme === 'dark');
            });

            systemPrefersDark.addEventListener('change', e => {
                console.log('System prefers dark media query changed. Matches:', e.matches); // Debugging log
                // Only apply system preference if no theme is explicitly set by the user
                if (!localStorage.getItem('theme')) {
                    applyTheme(e.matches);
                }
            });

            // --- GitHub Stats & Top Languages ---
            function updateGitHubStatsTheme(isDark) {
                const statsCard = document.getElementById('github-stats-card');
                const contributions = document.getElementById('github-contributions');
                const topLangs = document.getElementById('github-top-langs');
                const streakStats = document.getElementById('github-streak-stats');

                const themeName = isDark ? 'transparent' : 'default';
                const textColor = isDark ? 'f5f5f5' : '242424';
                const bgColor = isDark ? '1e1e1e' : 'f5f5f5';
                const borderColor = isDark ? '333333' : 'e1e1e1';
                const streakTheme = isDark ? 'dark' : 'light'; // Streak stats uses a different theme parameter

                if (statsCard) {
                    statsCard.src = `https://github-readme-stats.vercel.app/api?username=JThweb&show_icons=true&theme=${themeName}&text_color=${textColor}&bg_color=${bgColor}&border_color=${borderColor}&hide_border=false&border_radius=8`;
                }
                if (contributions) {
                    contributions.src = `https://raw.githubusercontent.com/JThweb/JThweb/output/github-contribution-grid-snake.svg`;
                }
                if (topLangs) {
                    topLangs.src = `https://github-readme-stats.vercel.app/api/top-langs/?username=JThweb&layout=compact&theme=${themeName}&text_color=${textColor}&bg_color=${bgColor}&border_color=${borderColor}&hide_border=false&border_radius=8`;
                }
                if (streakStats) { // Update GitHub Streak Stats
                    streakStats.src = `https://github-readme-streak-stats.herokuapp.com/?user=JThweb&theme=${streakTheme}&hide_border=true&border_radius=8`;
                }
            }

            // --- GitHub API and Project Loading ---
            const GITHUB_USERNAME = 'JThweb';
            const OAUTH_CLIENT_ID = 'Ov23liSLmQfrm4aBKuMk'; // Replace with your GitHub OAuth App Client ID
            // IMPORTANT: Update this to the full URL of your callback.html file
            const OAUTH_REDIRECT_URI = 'http://jthweb.github.io/callback.html';

            // Function to get the stored GitHub token
            function getGitHubToken() {
                return localStorage.getItem('github_token');
            }

            // Function to store the GitHub token
            function setGitHubToken(token) {
                localStorage.setItem('github_token', token);
                // After setting the token, you might want to re-check which repos are starred
            }

            // Function to handle GitHub OAuth login
            function loginToGitHub() {
                const authUrl = `https://github.com/login/oauth/authorize?client_id=${OAUTH_CLIENT_ID}&scope=public_repo&redirect_uri=${OAUTH_REDIRECT_URI}`;
                // Open a popup window for authentication
                window.open(authUrl, 'GitHubLogin', 'width=600,height=700');
            }

            // This function will be called from callback.html
            window.exchangeCodeForToken = async function(code) {
                // IMPORTANT: This needs a server-side component or a proxy to keep your client secret safe.
                // Example proxy: a serverless function on Vercel/Netlify.
                const proxyUrl = `https://github-oauth-proxy-server.vercel.app/api/github-auth?code=${code}`;

                try {
                    const response = await fetch(proxyUrl);
                    if (!response.ok) {
                        throw new Error('Failed to exchange code for token');
                    }
                    const data = await response.json();
                    if (data.access_token) {
                        setGitHubToken(data.access_token);
                        alert('Successfully logged in with GitHub!');
                    } else {
                        throw new Error(data.error || 'Unknown error during token exchange.');
                    }
                } catch (error) {
                    console.error('Token exchange error:', error);
                    alert(`Login failed: ${error.message}`);
                }
            }

            // Function to star a repository
            async function starRepository(repoFullName) {
                let token = getGitHubToken();
                if (!token) {
                    alert('Please log in with GitHub first to star repositories.');
                    loginToGitHub();
                    return;
                }

                try {
                    const response = await fetch(`https://api.github.com/user/starred/${repoFullName}`, {
                        method: 'PUT',
                        headers: {
                            'Authorization': `token ${token}`,
                            'Accept': 'application/vnd.github.v3+json',
                            'Content-Length': '0'
                        }
                    });

                    if (response.status === 204) {
                        alert(`Successfully starred ${repoFullName}! ⭐`);
                        const starButton = document.querySelector(`.star-repo-btn[data-repo-full-name="${repoFullName}"]`);
                        if (starButton) {
                            starButton.disabled = true;
                            starButton.innerHTML = '<i class="fas fa-check text-green-500"></i> Starred';
                        }
                    } else if (response.status === 401) {
                        localStorage.removeItem('github_token');
                        alert('Your GitHub session has expired. Please log in again.');
                        loginToGitHub();
                    } else {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Failed to star the repository.');
                    }
                } catch (error) {
                    console.error(`Failed to star ${repoFullName}:`, error);
                    alert(`Error: ${error.message}`);
                }
            }

            // --- Fetch Project Stats and Update Hero Section ---
            async function fetchAndDisplayProjects() {
                const projectsGrid = document.getElementById('projects-grid');
                const totalProjectsSpan = document.getElementById('total-projects');
                const totalStarsSpan = document.getElementById('total-stars');

                if (!projectsGrid) return;

                try {
                    const response = await fetch(`https://api.github.com/users/${GITHUB_USERNAME}/repos?sort=pushed&per_page=100`);
                    if (!response.ok) {
                        throw new Error(`GitHub API error: ${response.statusText}`);
                    }
                    let repos = await response.json();
                    const ignoredRepos = ['JThweb', 'new'];

                    // Filter out forked repos and ignored repos
                    repos = repos.filter(repo => !repo.fork && !ignoredRepos.includes(repo.name));

                    // Calculate total stars
                    const totalStars = repos.reduce((acc, repo) => acc + repo.stargazers_count, 0);

                    // Update total projects and stars counts
                    if (totalProjectsSpan) {
                        totalProjectsSpan.textContent = `${repos.length} Projects`;
                    }
                    if (totalStarsSpan) {
                        totalStarsSpan.textContent = `${totalStars} Stars`;
                    }

                    // Sort by stars for display
                    repos.sort((a, b) => b.stargazers_count - a.stargazers_count);

                    // Clear existing projects and render new ones
                    projectsGrid.innerHTML = '';
                    repos.forEach(repo => {
                        const projectCard = document.createElement('div');
                        projectCard.className = 'section-card flex flex-col';
                        projectCard.innerHTML = `
                            <div class="flex-grow">
                                <h3 class="font-bold text-xl mb-2">${repo.name.replace(/[-_]/g, ' ')}</h3>
                                <p class="text-sm" style="color: var(--text-secondary);">${repo.description || 'No description available.'}</p>
                                <div class="flex items-center mt-3 text-sm text-[var(--text-secondary)]">
                                    <span class="flex items-center mr-4"><i class="fas fa-star mr-1 text-yellow-500"></i> ${repo.stargazers_count}</span>
                                    <span class="flex items-center"><i class="fas fa-code-branch mr-1 text-gray-500"></i> ${repo.forks_count}</span>
                                </div>
                            </div>
                            <div class="flex space-x-2 mt-4">
                                <a href="${repo.html_url}" target="_blank" rel="noopener noreferrer" class="flex-1 px-3 py-2 rounded-lg font-semibold animated-button primary text-sm text-center">View on GitHub</a>
                                <a href="https://ko-fi.com/jthweb" target="_blank" rel="noopener noreferrer" class="flex-none px-3 py-2 rounded-lg font-semibold animated-button secondary text-sm">
                                    <i class="far fa-heart mr-1"></i> Sponsor
                                </a>
                                <button data-repo-full-name="${repo.full_name}" class="star-repo-btn flex-none px-3 py-2 rounded-lg font-semibold animated-button secondary text-sm">
                                    <i class="fas fa-star text-yellow-500"></i> Star
                                </button>
                            </div>
                        `;
                        projectsGrid.appendChild(projectCard);
                    });

                    // Add event listeners to the new star buttons
                    document.querySelectorAll('.star-repo-btn').forEach(button => {
                        button.addEventListener('click', () => {
                            const repoFullName = button.dataset.repoFullName;
                            starRepository(repoFullName);
                        });
                    });

                } catch (error) {
                    console.error('Failed to fetch projects:', error);
                    projectsGrid.innerHTML = `<p style="color: var(--text-secondary);">Could not load projects from GitHub. Please try again later.</p>`;
                }
            }

            // --- Custom Animated Cursor (JavaScript based) ---
            const customCursor = document.getElementById('custom-cursor');
            if (customCursor) {
                document.addEventListener('mousemove', (e) => {
                    customCursor.style.left = `${e.clientX}px`;
                    customCursor.style.top = `${e.clientY}px`;
                });
                // Add hover effects for interactive elements for the custom cursor
                document.querySelectorAll('a, button, .stat-bubble, .section-card').forEach(el => {
                    el.addEventListener('mouseenter', () => {
                        customCursor.style.width = '20px';
                        customCursor.style.height = '20px';
                        customCursor.style.opacity = '1';
                        // Get computed style for dynamic border color based on theme
                        customCursor.style.border = `2px solid ${getComputedStyle(document.documentElement).getPropertyValue('--primary')}`;
                    });
                    el.addEventListener('mouseleave', () => {
                        customCursor.style.width = '16px';
                        customCursor.style.height = '16px';
                        customCursor.style.opacity = '0.8';
                        customCursor.style.border = '2px solid transparent';
                    });
                    el.addEventListener('mousedown', () => {
                        customCursor.style.width = '24px';
                        customCursor.style.height = '24px';
                        customCursor.style.opacity = '0.9';
                        // Get computed style for dynamic border color based on theme
                        customCursor.style.border = `2px solid ${getComputedStyle(document.documentElement).getPropertyValue('--accent')}`;
                    });
                    el.addEventListener('mouseup', () => {
                        customCursor.style.width = '20px'; // Revert to hover size after click
                        customCursor.style.height = '20px';
                        customCursor.style.opacity = '1';
                        // Get computed style for dynamic border color based on theme
                        customCursor.style.border = `2px solid ${getComputedStyle(document.documentElement).getPropertyValue('--primary')}`;
                    });
                });
            }

            // --- Your Original JS for Animations ---
            function animateProgressBars() {
                document.querySelectorAll('.progress-bar').forEach(bar => {
                    const width = bar.style.width;
                    bar.style.width = '0'; // Reset to 0 for re-animation
                    setTimeout(() => { bar.style.width = width; }, 300);
                });
            }

            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('animate-fade-in');
                        if (entry.target.id === 'skills') {
                           animateProgressBars();
                        }
                        observer.unobserve(entry.target); // Stop observing once animated
                    }
                });
            }, { threshold: 0.1 });

            // --- Three.js Interactive Background (More "Flying Stuff") ---
            let scene, camera, renderer, shape, particles;
            const canvas = document.getElementById('bg-canvas');
            let mouseX = 0, mouseY = 0;

            function init3D() {
                scene = new THREE.Scene();
                camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
                renderer = new THREE.WebGLRenderer({ canvas: canvas, alpha: true, antialias: true });
                renderer.setSize(window.innerWidth, window.innerHeight);

                // Icosahedron (main shape)
                const geometry = new THREE.IcosahedronGeometry(1.5, 0);
                const material = new THREE.MeshStandardMaterial({
                    color: 0x0078d4, // Default primary color
                    metalness: 0.3,
                    roughness: 0.5,
                    wireframe: true,
                    transparent: true, // Make it subtle
                    opacity: 0.3 // Reduced opacity
                });
                shape = new THREE.Mesh(geometry, material);
                scene.add(shape);

                // Particle System (flying stuff)
                const particleCount = 1000;
                const particleGeometry = new THREE.BufferGeometry();
                const positions = new Float32Array(particleCount * 3);
                const colors = new Float32Array(particleCount * 3);

                const color1 = new THREE.Color(0xAAAAAA); // Light gray
                const color2 = new THREE.Color(0xDDDDDD); // Lighter gray

                for (let i = 0; i < particleCount; i++) {
                    // Random positions within a cube
                    positions[i * 3] = (Math.random() * 2 - 1) * 20; // x
                    positions[i * 3 + 1] = (Math.random() * 2 - 1) * 20; // y
                    positions[i * 3 + 2] = (Math.random() * 2 - 1) * 20; // z

                    // Random color between two shades
                    const mixedColor = new THREE.Color();
                    mixedColor.lerpColors(color1, color2, Math.random());
                    colors[i * 3] = mixedColor.r;
                    colors[i * 3 + 1] = mixedColor.g;
                    colors[i * 3 + 2] = mixedColor.b;
                }

                particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
                particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

                const particleMaterial = new THREE.PointsMaterial({
                    size: 0.05,
                    vertexColors: true, // Use colors from geometry
                    transparent: true,
                    opacity: 0.6,
                    blending: THREE.AdditiveBlending // For a glowing effect
                });
                particles = new THREE.Points(particleGeometry, particleMaterial);
                scene.add(particles);


                const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
                scene.add(ambientLight);
                const pointLight = new THREE.PointLight(0xffffff, 0.8);
                pointLight.position.set(5, 5, 5);
                scene.add(pointLight);

                camera.position.z = 5;
                canvas.style.opacity = '0.7'; // Increased opacity for more prominence
                document.addEventListener('mousemove', onDocumentMouseMove, false);
            }

            function onDocumentMouseMove(event) {
                mouseX = (event.clientX - window.innerWidth / 2) / 100;
                mouseY = (event.clientY - window.innerHeight / 2) / 100;
            }

            function animate3D() {
                if (!shape || !renderer || !camera || !particles) return; // Ensure all Three.js elements are initialized
                requestAnimationFrame(animate3D);

                // Smooth camera movement based on mouse position
                camera.position.x += (mouseX - camera.position.x) * .05;
                camera.position.y += (-mouseY - camera.position.y) * .05;
                camera.lookAt(scene.position);

                // Rotate the shape
                shape.rotation.y += 0.001;
                shape.rotation.x += 0.0005;

                // Animate particles (subtle movement)
                particles.rotation.y += 0.0001;
                particles.rotation.x += 0.00005;

                renderer.render(scene, camera);
            }

            function onWindowResize() {
                if (!camera || !renderer) return;
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }

            // Function to update 3D shape and particle color based on theme
            window.update3DTheme = function(isDark) {
                if (shape && shape.material) {
                    const newColor = isDark ? 0x2899f5 : 0x0078d4; // Dark mode primary vs Light mode primary
                    shape.material.color.setHex(newColor);
                }
                if (particles && particles.material) {
                    const newParticleColor1 = isDark ? 0x666666 : 0xAAAAAA;
                    const newParticleColor2 = isDark ? 0x999999 : 0xDDDDDD;
                    // Recreate particle colors (simple approach, for more complex, update attributes directly)
                    const colors = particles.geometry.attributes.color.array;
                    const colorA = new THREE.Color(newParticleColor1);
                    const colorB = new THREE.Color(newParticleColor2);
                    for (let i = 0; i < particles.geometry.attributes.position.count; i++) {
                        const mixedColor = new THREE.Color();
                        mixedColor.lerpColors(colorA, colorB, Math.random());
                        colors[i * 3] = mixedColor.r;
                        colors[i * 3 + 1] = mixedColor.g;
                        colors[i * 3 + 2] = mixedColor.b;
                    }
                    particles.geometry.attributes.color.needsUpdate = true;
                }
            }

            // Initialize Three.js on load
            init3D();
            animate3D();
            window.update3DTheme(document.documentElement.classList.contains('dark'));
            window.addEventListener('resize', onWindowResize, false);

            // --- Intro Loading Animation Logic ---
            // Initially hide main content
            mainContent.classList.add('hidden');

            window.addEventListener('load', () => {
                // Fetch projects on page load
                fetchAndDisplayProjects();

                // Update GitHub stats theme
                updateGitHubStatsTheme(document.documentElement.classList.contains('dark'));

                setTimeout(() => {
                    if (introLoader) {
                        introLoader.classList.add('fade-out');
                        introLoader.addEventListener('transitionend', () => {
                            introLoader.remove(); // Remove from DOM after fade out
                            if (mainContent) {
                                mainContent.style.display = 'block'; // Make it block before fading
                                setTimeout(() => { // Small delay to ensure display:block applies before transition
                                    mainContent.classList.add('show'); // Fade in main content
                                    // Trigger initial animations for sections after main content is visible
                                    document.querySelectorAll('section').forEach(sec => {
                                        sec.classList.add('opacity-0'); // Ensure initial opacity is 0 for sections
                                        observer.observe(sec);
                                    });
                                }, 50); // Small delay
                            }
                        });
                    }
                }, 2000); // 2 seconds delay for intro loader
            });
        });
    </script>
</body>
</html>
